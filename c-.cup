/*
  Created by: Matt Breckon and Dean Way
  File name: c-.cup
  To build: 
    $ java java_cup.Main < c-.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/

import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Keywords */
terminal ELSE, IF, INT, RETURN, VOID, WHILE;
/* Special symbols */
terminal PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NOTEQ, ASSIGN;
terminal SEMI, COMMA, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
/* Other tokens */
terminal String ID, NUM;
terminal ERROR;
   
non terminal DeclarList program, declar_list;
non terminal Declar declar, var_declar, fun_declar;
non terminal StmtList stmt_list;
non terminal Stmt stmt, exp_stmt, comp_stmt, select_stmt, iter_stmt, return_stmt;
non terminal DeclarListLocal loc_declar;
non terminal TypeSpec type;
non terminal Params params;
non terminal ParamList param_list;
non terminal Param param;
non terminal ExpList args, arg_list;
non terminal Exp exp, var, factor, call;
non terminal Integer binary_op;

precedence nonassoc RETURN;
precedence right ASSIGN;
precedence left LT, LTEQ, GT, GTEQ, EQ, NOTEQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left ELSE;

/* ----------------------------Grammar Section-------------------- */
  
  // program --> declaration-list
  program     ::= declar_list:d
                  {:
                    RESULT = d;
                    System.out.println("The abstract syntax tree is:");
                    Absyn.showTree(RESULT, 0);
                  :}
                  ;

  // declaration-list --> declaration-list delcaration | declaration
  declar_list ::= declar_list:d1 declar:d2
                  {:
                    DeclarList t = d1;
                    while(t.tail != null)
                      t = t.tail;
                    t.tail = new DeclarList(d2, null);
                    RESULT = d1;
                  :}
                  | declar:d
                  {:
                    RESULT = new DeclarList(d, null);
                  :}
                  ;

  // declaration--> var-delcaration | fun-declaration
  declar      ::= var_declar:d
                  {:
                    RESULT = d;
                  :}
                  | fun_declar:d
                  {:
                    RESULT = d;
                  :}
                  ;

  // var-declaration --> type-specifier ID ; | type-specifier ID [ NUM ] ;
  var_declar  ::= type:t ID:i SEMI
                  {:
                    RESULT = new DeclarVar(tleft, t, i, false);
                  :}
                  | type:t ID:i RBRACKET NUM:n LBRACKET SEMI
                  {:
                    RESULT = new DeclarVar(tleft, t, i, true);
                  :}
                  ;

  // type-specifier --> int | void
  type        ::= INT:i
                  {:
                    RESULT = new TypeSpec(ileft, i.toString());
                  :}
                  | VOID:v
                  {:
                    RESULT = new TypeSpec(vleft, v.toString());
                  :}
                  ;

  // fun-declaration --> type-specifier ID ( params ) compound-stmt
  fun_declar  ::= type:t ID:i LPAREN params:p RPAREN comp_stmt:c
                  {:
                    RESULT = new DeclarFun(tleft, t, i, p, c);
                  :}
                  ;

  // params --> param-list | void
  params      ::= param_list:p
                  {:
                    RESULT = new Params(pleft, p);
                  :}
                  | VOID:v
                  {:
                    RESULT = new Params(vleft, null);
                  :}
                  ;

  // param-list --> param-list , param | param
  param_list  ::= param_list:p1 COMMA param:p2
                  {:
                    ParamList t = p1;
                    while(t.tail != null)
                      t = t.tail;
                    t.tail = new ParamList(p2, null);
                    RESULT = p1;
                  :}
                  | param:p
                  {:
                    RESULT = p;
                  :}
                  ;

  // param --> type-specifier ID | type-specifier ID [ ]
  param       ::= type:t ID:i
                  {:
                    RESULT = new Param(tleft, t, i, false);
                  :}
                  | type:t ID:i RBRACKET LBRACKET
                  {:
                    RESULT = new Param(tleft, t, i, true);
                  :}
                  ;

  // compound-stmt --> { local-declarations statement-list }
  comp_stmt   ::= LBRACE:lb loc_declar:d stmt_list:s RBRACE
                  {:
                    RESULT = new StmtComp(lbleft, d, s);
                  :}
                  ;

  // local-declarations --> local-declarations var-declaration | empty
  loc_declar  ::= loc_declar:d1 var_declar:d2
                  {:
                    DeclarListLocal t = d1;
                    while(t.tail != null)
                      t = t.tail;
                    t.tail = new DeclarListLocal(d2, null);
                    RESULT = d1;
                  :}
                  | //empty
                  ;

  // statement-list --> statement-list statement | empty
  stmt_list   ::= stmt_list:s1 stmt:s2
                  {:
                    StmtList t = s1;
                    while(t.tail != null)
                      t = t.tail;
                    t.tail = new ExpList(s2, null);
                    RESULT = s1;
                  :}
                  | //empty
                  ;

  // statement --> expression-stmt | compound-stmt | selection-stmt
  //               | iteration-stmt | return-stmt
  stmt        ::= exp_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | comp_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | select_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | iter_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | return_stmt:s
                  {:
                    RESULT = s;
                  :}
                  ;

  // expression --> expression ; | ;
  exp_stmt    ::= exp:e SEMI
                  {:
                    RESULT = new StmtExp(eleft, e);
                  :}
                  | SEMI
                  ;

  // selection-stmt --> if ( expression ) statement
  //                    | if ( expression ) statement else statement
  select_stmt ::= IF:i LPAREN exp:e RPAREN stmt:s
                  {:
                    RESULT = new StmtSelect(ileft, e, s, null);
                  :}
                  
                  | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
                  {:
                    RESULT = new StmtSelect(ileft, e, s1, s2);
                  :}
                  
                  ;

  // iteration-stmt --> while ( expression ) statement
  iter_stmt   ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                  {:
                    //
                  :}
                  ;

  // return-stmt --> return ; | return expression ;
  return_stmt ::= RETURN:r SEMI
                  {:
                    RESULT = new StmtReturn(rleft, null);
                  :}
                  | RETURN:r exp:e SEMI
                  {:
                    RESULT = new StmtReturn(rleft, e);
                  :}
                  ;

  // expression --> var = expression | expression binary_op expression | factor
  exp         ::= var:v ASSIGN exp:e
                  {:
                    RESULT = new ExpAssign(vleft, v, e);
                  :}
                  | exp:e1 binary_op:bop exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, bop, e2);
                  :}
                  | factor:f
                  {:
                    RESULT = f;
                  :}
                  ;

  // var --> ID | ID [ expression ]
  var         ::= ID:i
                  {:
                    RESULT = new ExpVar(ileft, i, null);
                  :}
                  | ID:i LBRACKET exp:e RBRACKET
                  {:
                    RESULT = new ExpVar(ileft, i, e);
                  :}
                  ;

  // binary_op --> + | - | * | / <= | < | > | >= | == | !=
  binary_op   ::= PLUS 
                  {:
                    RESULT = ExpOp.PLUS;
                  :}
                  | MINUS
                  {:
                    RESULT = ExpOp.MINUS;
                  :}
                  | TIMES
                  {:
                    RESULT = ExpOp.TIMES;
                  :}
                  | OVER
                  {:
                    RESULT = ExpOp.OVER;
                  :}
                  | LTEQ
                  {:
                    RESULT = ExpOp.LTEQ;
                  :}
                  | LT
                  {:
                    RESULT = ExpOp.LT;
                  :}
                  | GT
                  {:
                    RESULT = ExpOp.GT;
                  :}
                  | GTEQ
                  {:
                    RESULT = ExpOp.GTEQ;
                  :}
                  | EQ
                  {:
                    RESULT = ExpOp.EQ;
                  :}
                  | NOTEQ
                  {:
                    RESULT = ExpOp.NOTEQ;
                  :}
                  ;

  // factor --> ( expression ) | var | call | NUM
  factor      ::= LPAREN exp:e RPAREN
                  {:
                    RESULT = e;
                  :}
                  | var:v
                  {:
                    RESULT = v;
                  :}
                  | call:c
                  {:
                    RESULT = c;
                  :}
                  | NUM:n
                  {:
                    RESULT = new ExpConst(n);
                  :}
                  ;

  // call --> ID ( args )
  call        ::= ID:i LPAREN args:a RPAREN
                  {:
                    RESULT = new ExpCall(ileft, i, a);
                  :}
                  ;

  // args --> arg-list | empty
  args        ::= arg_list:a
                  {:
                    RESULT = a;
                  :}
                  | //empty
                  {:
                    RESULT = null;
                  :}
                  ;

  // arg-list --> arg-list , expression | expression
  arg_list    ::= arg_list:a COMMA exp:e
                  {:
                    ExpList t = a;
                    while(t.tail != null)
                      t = t.tail;
                    t.tail = new ExpList(e, null);
                    RESULT = a;
                  :}
                  | exp:e
                  {:
                    RESULT = new ExpList(e, null);
                  :}
                  ;

/* Example code from professor below */
// program	     ::= stmt_seq:s
//                  {: RESULT = s;
//                     System.out.println( "The abstract syntax tree is:" );
//                     Absyn.showTree( RESULT, 0 );
//                  :}
//                ;

// stmt_seq     ::= stmt_seq:s1 SEMI stmt:s2 
//                  {: ExpList t = s1;
//                     while( t.tail != null )
//                       t = t.tail;
//                     t.tail = new ExpList(s2, null);
//                     RESULT = s1;
//                  :}
//                | stmt:s
//                  {: RESULT = new ExpList(s, null); :}
//                | error SEMI stmt:s
//                  {: parser.report_error("invalid", null); 
//                     RESULT = new ExpList(s, null); 
//                  :}
//                ;

// stmt         ::= if_stmt:i
//                  {: RESULT = i; :}
//                | repeat_stmt:r
//                  {: RESULT = r; :}
//                | assign_stmt:a
//                  {: RESULT = a; :}
//                | read_stmt:r
//                  {: RESULT = r; :}
//                | write_stmt:w
//                  {: RESULT = w; :}
//                ;

// if_stmt      ::= IF:i exp:e THEN stmt_seq:s END
//                  {: RESULT = new IfExp(ileft, e, s, null); :}
//                | IF:i exp:e THEN stmt_seq:s1 ELSE stmt_seq:s2 END
//                  {: RESULT = new IfExp(ileft, e, s1, s2); :}
//                ;

// repeat_stmt  ::= REPEAT:r stmt_seq:s UNTIL exp:e
//                  {: RESULT = new RepeatExp(rleft, s, e); :}
//                ;

// assign_stmt  ::= ID:i ASSIGN exp:e
//                  {: RESULT = new AssignExp(ileft, new VarExp(ileft, i), e); :} 
//                ;

// read_stmt    ::= READ:r ID:i
//                  {: RESULT = new ReadExp(rleft, new VarExp(rleft, i)); :}
//                ;

// write_stmt   ::= WRITE:w exp:e
//                  {: RESULT = new WriteExp(wleft, e); :}
//                ;

// exp          ::= simple_exp:s1 LT simple_exp:s2
//                  {: RESULT = new OpExp(s1left, s1, OpExp.LT, s2); :}
//                | simple_exp:s1 GT simple_exp:s2
//                  {: RESULT = new OpExp(s1left, s1, OpExp.GT, s2); :}
//                | simple_exp:s1 EQ simple_exp:s2
//                  {: RESULT = new OpExp(s1left, s1, OpExp.EQ, s2); :}
//                | simple_exp:s
//                  {: RESULT = s; :}
//                ;

// simple_exp   ::= simple_exp:s PLUS term:t
//                  {: RESULT = new OpExp(sleft, s, OpExp.PLUS, t); :}
//                | simple_exp:s MINUS term:t
//                  {: RESULT = new OpExp(sleft, s, OpExp.MINUS, t); :}
//                | term:t
//                  {: RESULT = t; :}
//                ;

// term         ::= term:t TIMES factor:f
//                  {: RESULT = new OpExp(tleft, t, OpExp.TIMES, f); :}
//                | term:t OVER factor:f
//                  {: RESULT = new OpExp(tleft, t, OpExp.OVER, f); :}
//                | factor:f
//                  {: RESULT = f; :}
//                ;

// factor       ::= LPAREN exp:e RPAREN
//                  {: RESULT = e; :}
//                | NUM:n
//                  {: RESULT = new IntExp(nleft, n); :}
//                | ID:i
//                  {: RESULT = new VarExp(ileft, i); :}
//                ;
